#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('project-shield:server');
var http = require('http');
var firebase = require('firebase');
var linebot = require('linebot');
const line = require('@line/bot-sdk');
var apiai = require('apiai');

var config = {
    apiKey: "AIzaSyAqzIra9YkeE0HZZBSwXrjh4GemO7yVdmI",
    authDomain: "shield-88fd0.firebaseapp.com",
    databaseURL: "https://shield-88fd0.firebaseio.com",
    projectId: "shield-88fd0",
    storageBucket: "shield-88fd0.appspot.com",
    messagingSenderId: "376341346069"
};
firebase.initializeApp(config);

const usersRef = firebase.database().ref().child('chats/users');
const agentsRef = firebase.database().ref().child('chats/agents');

const auth = firebase.auth();
// console.log(auth.app);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require('socket.io').listen(server);

/**
 * Variables
 */
var users = {};
var type_sticker = 0;
//webhook event
var message_lineTochat;
var receiverId = '';
// LINE bot設定
var bot = linebot({
    channelId: '1516667468',
    channelSecret: 'd89c9a5ef9ae83fbdfd2fc59ab451f98',
    channelAccessToken: 'yeeDeC5dExJDeVEPPf2dMTlAoZE4izrqX6bBaldhddpG7esOFEpxm5m5dMIIB7pz0zIS49QZxJBFgAkxQZWmfy9toaiTR+B/q1pz7F5xkf+dljkSJV1krOOtrT93BSSYydIZLnt0zxX8JCqWF4uE4wdB04t89/1O/w1cDnyilFU='
});
const linebotParser = bot.parser();


// api ai setting
var appApiai = apiai("6fd13e1dd00b4d93881e1e75cdf02bd4");

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// 接收訊息
// LINE bot implement
bot.on('message', event => {
    // console.log(event);
    let d = Date.now();
    let date = new Date(d);
    let message_type = event.message.type;
    let address = event.message.address;
    let latitude = event.message.latitude;
    let longitude = event.message.longitude;
    message_lineTochat = event.message.text;
    receiverId = event.source.userId;
    let receiver_name;
    // console.log(receiverId);

    event.source.profile().then(function(profile) {
        // event.reply('Hello ' + profile.displayName);
        receiver_name = profile.displayName


        // from wenyen
        //  ===================  KINDS ====================
        if (message_type === 'sticker') {

            io.sockets.emit('new message', {
                msg: 'Sticker received. Please check your phone.',
                name: receiver_name
            });

            type_sticker += 1;


        } else if (message_type === 'location') {
            io.sockets.emit('new message', {
                msg: 'Location received: ',
                name: receiver_name
            });
            io.sockets.emit('new message', {
                msg: address,
                name: receiver_name
            });
            event.message.content().then(function(content) {
                /*'base64'是圖片的編碼*/
                console.log(content.toString('base64'));
                /*把編碼轉換成圖片(image/png)做成連結的方式*/
                io.sockets.emit('new message', {
                    msg: '<a target="_blank" href=" https://www.google.com.tw/maps/place/' + content.toString('base64') + '/@' + latitude + ',' + longitude + ',15z/data=!4m5!3m4!1s0x0:0x496596e7748a5757!8m2!3d' + latitude + '!4d' + longitude + '">LOCATION LINK</a>',
                    name: receiver_name
                });
            }).catch(function(error) {
                // error
            });

        } else if (message_type === 'image') {
            io.sockets.emit('new message', {
                msg: 'Image received. Please wait for the link below',
                name: receiver_name
            });

            event.message.content().then(function(content) {
                /*'base64'是圖片的編碼*/
                console.log(content.toString('base64'));
                /*把編碼轉換成圖片(image/png)做成連結的方式*/
                io.sockets.emit('new message', {
                    msg: '<a target="_blank" href="data:image/png;base64,' + content.toString('base64') + '" ' +
                        'width="70" height="38" alt="image embedded using base64 encoding!">IMAGE LINK</a>',
                    name: receiver_name
                });

            }).catch(function(error) {
                // error
                console.log(error);
            });

        } else if (message_type === 'audio') {
            io.sockets.emit('new message', {
                msg: 'Audio received. Please wait for the link below.',
                name: receiver_name
            });
            event.message.content().then(function(content) {
                console.log(content.toString('base64'));
                io.sockets.emit('new message', {
                    msg: '<a target="_blank" href="data:audio/mp4;base64,' + content.toString('base64') + '" ' +
                        '">AUDIO LINK</a>',
                    name: receiver_name
                });

            }).catch(function(error) {
                // error
                console.log(error);
            });
        } else if (message_type === 'video') {
            io.sockets.emit('new message', {
                msg: 'Video received. Please wait for the link below.',
                name: receiver_name
            });
            event.message.content().then(function(content) {
                console.log(content.toString('base64'));
                io.sockets.emit('new message', {
                    msg: '<a target="_blank" href="data:video/mp4;base64,' + content.toString('base64') + '" ' +
                        '">VIDEO LINK</a>',
                    name: receiver_name
                });

            }).catch(function(error) {
                // error
                console.log(error);
            });
        } else if (message_type === 'text' && (message_lineTochat.indexOf('.com') !== -1 || message_lineTochat.indexOf('.edu') !== -1 || message_lineTochat.indexOf('.net') !== -1 || message_lineTochat.indexOf('.io') !== -1 || message_lineTochat.indexOf('.org') !== -1)) {
            if (message_lineTochat.indexOf('https') !== -1 || message_lineTochat.indexOf('http') !== -1) {
                io.sockets.emit('new message', {
                    msg: '<a href=' + message_lineTochat + '>' + message_lineTochat + '</a>',
                    name: receiver_name
                });
            } else {
                io.sockets.emit('new message', {
                    msg: '<a href="https://' + message_lineTochat + '/" target="_blank">' + message_lineTochat + '</a>',
                    name: receiver_name
                });
            }

            usersRef.push({
                message: message_lineTochat,
                user: receiverId,
                username: receiver_name,
                messageTime: date.toString()
            });
        } else if (event.message.type === 'text' && message_lineTochat.trim() === '購買方案') {
            io.sockets.emit('new message', {
                msg: '已接收購買方案' + "4小時方案  " + "8小時方案  " + "16小時方案  ",
                name: receiver_name,
            });
            event.reply({
                "type": "template",
                "altText": "this is a buttons template",
                "template": {
                    "type": "buttons",
                    "title": "購買方案說明",
                    "text": "請選擇一個方案",
                    "actions": [{
                            "type": "message",
                            "label": "4小時方案",
                            "text": "4小時方案"
                        },
                        {
                            "type": "message",
                            "label": "8小時方案",
                            "text": "8小時方案"
                        },
                        {
                            "type": "message",
                            "label": "16小時方案",
                            "text": "16小時方案"
                        }
                    ]
                }
            })
            usersRef.push({
                message: message_lineTochat,
                user: receiverId,
                username: receiver_name,
                messageTime: date.toString()
            });

        } else if (event.message.type === 'text' && message_lineTochat.trim() === 'Hi') {
            io.sockets.emit('new message', {
                msg: '已接收選項' + "購買方案, " + "服務時段",
                name: receiver_name,
            });
            event.reply({
                "type": "template",
                "altText": "this is a buttons template",
                "template": {
                    "type": "buttons",
                    "title": "問題選項",
                    "text": "請選擇一個詢問主題",
                    "actions": [{
                            "type": "message",
                            "label": "購買方案",
                            "text": "購買方案"
                        },
                        {
                            "type": "message",
                            "label": "服務時段",
                            "text": "服務時段"
                        },

                    ]

                }
            })
            usersRef.push({
                message: message_lineTochat,
                user: receiverId,
                username: receiver_name,
                messageTime: date.toString()
            });



        } else if (event.message.type === 'text' && message_lineTochat.trim() === '服務時段') {
            let service_time = '「0700~1100」 \n 「1100~1500」 \n 「1500~1900」 \n 「1900~2300」 \n 兩個時段必須是「連續的」 \n 「0700~1100」及「1100~1500」 \n 「1100~1500」及「1500~1900」 \n 「1500~1900」及「1900~2300」。';
            io.sockets.emit('new message', {
                msg: '已發送服務時段' + "「0700~1100」" + "「1100~1500」" + "「1500~1900」" + "「1900~2300」",
                name: receiver_name
            });
            event.reply({
                type: 'text',
                text: 'BOT：\n' + service_time
            });
            usersRef.push({
                message: '已發送服務時段' + "0700~1100」" + "「1100~1500」" + "「1500~1900」" + "「1900~2300」",
                user: receiver_name,
                messageTime: date.toString()
            });

        } else if (event.message.type === 'text' && message_lineTochat.trim() === '4小時方案') {
            let four = '4小時方案 \n 15,888 元 \n 4小時方案/每天 \n $15,888每月';
            io.sockets.emit('new message', {
                msg: four,
                name: receiver_name
            });
            event.reply({
                type: 'text',
                text: 'BOT：' + four
            });
        } else if (event.message.type === 'text' && message_lineTochat.trim() === '8小時方案') {
            let eight = '8小時方案 \n 21,888 元 \n 8小時方案/每天 \n $21,888每月';
            io.sockets.emit('new message', {
                msg: eight,
                name: receiver_name
            });
            event.reply({
                type: 'text',
                text: 'BOT：' + eight
            });
        } else if (event.message.type === 'text' && message_lineTochat.trim() === '16小時方案') {
            let sixteen = '16小時方案 \n 39,888 元 \n 16小時方案/每天 \n $39,888每月';
            io.sockets.emit('new message', {
                msg: sixteen,
                name: receiver_name
            });
            event.reply({
                type: 'text',
                text: 'BOT：' + sixteen
            });
        } else {
            io.sockets.emit('new message', {
                msg: message_lineTochat,
                name: receiver_name
            });
            usersRef.push({
                message: message_lineTochat,
                user: receiverId,
                username: receiver_name,
                messageTime: date.toString()
            });
        }

    }).catch(function(error) {
        // error
        console.log(error);
    });
    // 訊息是xxxxxx, template message
    // AI 機器人 設定
    // var request = appApiai.textRequest(message_lineTochat, {
    //     sessionId: '46110120-6a78-4a0e-a5f0-a8596b53d37e'
    // });
    // request.on('response', function(response) {
    //     console.log(response);
    //     let res_msg = response.result.fulfillment.speech
    //     if (response.result.action !== 'input.unknown') {
    //         io.sockets.emit('new message', {
    //             msg: res_msg,
    //             name: 'BOT'
    //         });
    //         event.reply({
    //             type: 'text',
    //             text: 'BOT：' + res_msg
    //         });
    //     }
    // });
    // request.on('error', function(error) {
    //     console.log(error);
    // });
    // request.end();
    // AI  機器人 end

});
app.post('/webhook/', linebotParser);



/**
 * Socket.io
 */
//連接
io.sockets.on('connection', (socket) => {

    // 新使用者
    socket.on('new user', (data, callback) => {
        // if(nicknames.indexOf(data) != -1){
        if (data in users) {
            callback(false);
        } else {
            callback(true);
            socket.nickname = data;
            users[socket.nickname] = socket;
            // nicknames.push(socket.nickname);
            updateNicknames();
        }
    });



    function updateNicknames() {
        io.sockets.emit('usernames', Object.keys(users));
    }

    // 從SHIELD chat傳送訊息
    socket.on('send message', (data, callback) => {
        console.log(data, receiverId);
        var msg = data.trim();
        var message;

        if (msg.includes('/sticker')) {
            message = {
                type: "sticker",
                packageId: "1",
                stickerId: "10"
            };
        } else {
            message = {
                type: "text",
                text: msg
            };
        }

        let d = Date.now();
        let date = new Date(d);

        // 訊息傳到後台介面上
        if (msg.indexOf('.com') !== -1 || msg.indexOf('.edu') !== -1 || msg.indexOf('.net') !== -1 || msg.indexOf('.io') !== -1 || msg.indexOf('.org') !== -1) {
            if (message_lineTochat.indexOf('https') !== -1 || message_lineTochat.indexOf('http') !== -1) {
                io.sockets.emit('new message', {
                    msg: '<a href=' + message_lineTochat + '>' + message_lineTochat + '</a>',
                    name: socket.nickname,
                    id: receiverId
                });
            } else {
                io.sockets.emit('new message', {
                    msg: '<a href="https://' + message_lineTochat + '/" target="_blank">' + message_lineTochat + '</a>',
                    name: socket.nickname,
                    id: receiverId

                });
            }
        } else if (msg.includes('/sticker')) {
            io.sockets.emit('new message', {
                msg: 'Send sticker to user',
                name: socket.nickname,
                id: receiverId
            });
        } else {
            io.sockets.emit('new message', {
                msg: msg,
                name: socket.nickname,
                id: receiverId
            });
        }


        /*  =======  Define Receiver  ========  */
        var defReceiver;
        socket.on('receiver', (data, callback) => {
            callback(true);
            socket.defReceiver = data;
            console.log('Just arived in www, tell me whats socket.defReceiver');
            console.log(socket.defReceiver);

        });


        /*  ==================================  */

        console.log('before bot push, tell me what is socket.defReceiver');
        console.log(socket.defReceiver);
        // 訊息傳到LINE
        if (receiverId !== undefined) {
            bot.push(receiverId, message);
        }


        // 訊息儲存到firebase資料庫
        agentsRef.push({
            message: msg,
            agent: socket.nickname,
            messageTime: date.toString()
        });
    }); //sent message

    socket.on('disconnect', (data) => {
        if (!socket.nickname) return;
        delete users[socket.nickname];
        // nicknames.splice(nicknames.indexOf(socket.nickname), 1);
        updateNicknames();
    });
});

// catch 404 and forward to error handler
app.use(function(req, res, next) {
    var err = new Error('Not Found');
    err.status = 404;
    next(err);
});

// error handler
app.use(function(err, req, res, next) {
    // set locals, only providing error in development
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};

    // render the error page
    res.status(err.status || 500);
    res.render('error');
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}
