#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('project-shield:server');
var http = require('http');
var firebase = require('firebase');
var linebot = require('linebot');
const line = require('@line/bot-sdk');
var apiai = require('apiai');

var config = {
    apiKey: "AIzaSyAqzIra9YkeE0HZZBSwXrjh4GemO7yVdmI",
    authDomain: "shield-88fd0.firebaseapp.com",
    databaseURL: "https://shield-88fd0.firebaseio.com",
    projectId: "shield-88fd0",
    storageBucket: "shield-88fd0.appspot.com",
    messagingSenderId: "376341346069"
};
firebase.initializeApp(config);

const usersRef = firebase.database().ref().child('chats/users');
const agentsRef = firebase.database().ref().child('chats/agents');

const auth = firebase.auth();
// console.log(auth.app);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require('socket.io').listen(server);

/**
 * Variables
 */
var users = {};
var type_sticker = 0;
//webhook event
var message_lineTochat;
var receiverId = 'Ue369116591fbd2d13a7eb5f0ff12547b';
// LINE bot設定
var bot = linebot({
    channelId: '1522555697',
    channelSecret: 'bf698f41fcc086655174327b8ad752d5',
    channelAccessToken: '+hGZzOkZqSikClHB5FYvYQqSoLGa4I+RVDyc3II8V92kGUxuzEvSLQpX8drq2AmLcbmc3RoZLcL0OnYJJGut9X12SB/MlL/2l58mPwXKSAEw2EtFl7pwAQx2nuB8d66Juu5YaqCKaB6E/+14vd6SHQdB04t89/1O/w1cDnyilFU='
});
const linebotParser = bot.parser();
const client = new line.Client({
    channelAccessToken: '+hGZzOkZqSikClHB5FYvYQqSoLGa4I+RVDyc3II8V92kGUxuzEvSLQpX8drq2AmLcbmc3RoZLcL0OnYJJGut9X12SB/MlL/2l58mPwXKSAEw2EtFl7pwAQx2nuB8d66Juu5YaqCKaB6E/+14vd6SHQdB04t89/1O/w1cDnyilFU='
});

// api ai setting
var appApiai = apiai("6fd13e1dd00b4d93881e1e75cdf02bd4");

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// 接收訊息
// LINE bot implement
bot.on('message', event => {
    console.log(event);
    let d = Date.now();
    let date = new Date(d);
    let message_type = event.message.type;
    let address = event.message.address;
    let latitude = event.message.latitude;
    let longitude = event.message.longitude;
    message_lineTochat = event.message.text;
    receiverId = event.source.userId;

    // from wenyen
    //  ===================  KINDS ====================
    if (message_type === 'sticker') {

        io.sockets.emit('new message', {
            msg: 'Sticker received. Please check your phone.',
            name: 'Visitor'
        });

        type_sticker += 1;


        event.reply({

            "type": "template",
            "altText": "this is a confirm template",

            "template": {
                "type": "confirm",
                "text": "Are you sure?",
                "actions": [{
                        "type": "message",
                        "label": "Yes",
                        "text": "yes"
                    },

                    {
                        "type": "message",
                        "label": "No",
                        "text": "no"
                    }
                ]
            }

        });

    } else if (message_type === 'location') {
        io.sockets.emit('new message', {
            msg: 'Location received: ',
            name: 'Visitor'
        });
        io.sockets.emit('new message', {
            msg: address,
            name: 'Visitor'
        });
        event.message.content().then(function(content) {
            /*'base64'是圖片的編碼*/
            console.log(content.toString('base64'));
            /*把編碼轉換成圖片(image/png)做成連結的方式*/
            io.sockets.emit('new message', {
                msg: '<a target="_blank" href=" https://www.google.com.tw/maps/place/' + content.toString('base64') + '/@' + latitude + ',' + longitude + ',15z/data=!4m5!3m4!1s0x0:0x496596e7748a5757!8m2!3d' + latitude + '!4d' + longitude + '">LOCATION LINK</a>',
                name: 'Visitor'
            });
        }).catch(function(error) {
            // error
        });

    } else if (message_type === 'image') {
        io.sockets.emit('new message', {
            msg: 'Image received. Please wait for the link below',
            name: 'Visitor'
        });

        event.message.content().then(function(content) {
            /*'base64'是圖片的編碼*/
            console.log(content.toString('base64'));
            /*把編碼轉換成圖片(image/png)做成連結的方式*/
            io.sockets.emit('new message', {
                msg: '<a target="_blank" href="data:image/png;base64,' + content.toString('base64') + '" ' +
                    'width="70" height="38" alt="image embedded using base64 encoding!">IMAGE LINK</a>',
                name: 'Visitor'
            });

        }).catch(function(error) {
            // error
            console.log(error);
        });

    } else if (message_type === 'audio') {
        io.sockets.emit('new message', {
            msg: 'Audio received. Please wait for the link below.',
            name: 'Visitor'
        });
        event.message.content().then(function(content) {
            console.log(content.toString('base64'));
            io.sockets.emit('new message', {
                msg: '<a target="_blank" href="data:audio/mp4;base64,' + content.toString('base64') + '" ' +
                    '">AUDIO LINK</a>',
                name: 'Visitor'
            });

        }).catch(function(error) {
            // error
            console.log(error);
        });
    } else if (message_type === 'video') {
        io.sockets.emit('new message', {
            msg: 'Video received. Please wait for the link below.',
            name: 'Visitor'
        });
        event.message.content().then(function(content) {
            console.log(content.toString('base64'));
            io.sockets.emit('new message', {
                msg: '<a target="_blank" href="data:video/mp4;base64,' + content.toString('base64') + '" ' +
                    '">VIDEO LINK</a>',
                name: 'Visitor'
            });

        }).catch(function(error) {
            // error
            console.log(error);
        });
    } else if (message_type === 'text' && (message_lineTochat.indexOf('.com') !== -1 || message_lineTochat.indexOf('.edu') !== -1 || message_lineTochat.indexOf('.net') !== -1 || message_lineTochat.indexOf('.io') !== -1 || message_lineTochat.indexOf('.org') !== -1)) {
        if (message_lineTochat.indexOf('https') !== -1 || message_lineTochat.indexOf('http') !== -1) {
            io.sockets.emit('new message', {
                msg: '<a href=' + message_lineTochat + '>' + message_lineTochat + '</a>',
                name: 'Visitor'
            });
        } else {
            io.sockets.emit('new message', {
                msg: '<a href="https://' + message_lineTochat + '/" target="_blank">' + message_lineTochat + '</a>',
                name: 'Visitor'
            });
        }

        usersRef.push({
            message: message_lineTochat,
            user: receiverId,
            messageTime: date.toString()
        });
    } else if (event.message.type === 'text' && message_lineTochat.trim() === '菜單') {
        io.sockets.emit('new message', {
            msg: '已發送菜單',
            name: 'notice'
        });
        event.reply({
            "type": "template",
            "altText": "this is a buttons template",
            "template": {
                "type": "buttons",
                "thumbnailImageUrl": "https://example.com/bot/images/image.jpg",
                "title": "Menu",
                "text": "Please select",
                "actions": [{
                        "type": "postback",
                        "label": "Buy",
                        "data": "action=buy&itemid=123"
                    },
                    {
                        "type": "postback",
                        "label": "Add to cart",
                        "data": "action=add&itemid=123"
                    },
                    {
                        "type": "uri",
                        "label": "View detail",
                        "uri": "http://example.com/page/123"
                    }
                ]
            }
        })
        usersRef.push({
            message: message_lineTochat,
            user: receiverId,
            messageTime: date.toString()
        });

    } else if (event.message.type === 'text' && message_lineTochat.trim() === '選項') {
        io.sockets.emit('new message', {
            msg: '已發送選項',
            name: 'notice'
        });
        event.reply({
            "type": "template",
            "altText": "this is a confirm template",
            "template": {
                "type": "confirm",
                "text": "Are you sure?",
                "actions": [{
                        "type": "message",
                        "label": "Yes",
                        "text": "yes"
                    },
                    {
                        "type": "message",
                        "label": "No",
                        "text": "no"
                    }
                ]
            }
        })
        usersRef.push({
            message: message_lineTochat,
            user: receiverId,
            messageTime: date.toString()
        });

    } else if (event.message.type === 'text' && message_lineTochat.trim() === '旋轉盤') {
        io.sockets.emit('new message', {
            msg: '已發送旋轉盤',
            name: 'notice'
        });
        event.reply({
            "type": "template",
            "altText": "this is a carousel template",
            "template": {
                "type": "carousel",
                "columns": [{
                        "thumbnailImageUrl": "https://example.com/bot/images/item1.jpg",
                        "title": "this is menu",
                        "text": "description",
                        "actions": [{
                                "type": "postback",
                                "label": "Buy",
                                "data": "action=buy&itemid=111"
                            },
                            {
                                "type": "postback",
                                "label": "Add to cart",
                                "data": "action=add&itemid=111"
                            },
                            {
                                "type": "uri",
                                "label": "View detail",
                                "uri": "http://example.com/page/111"
                            }
                        ]
                    },
                    {
                        "thumbnailImageUrl": "https://example.com/bot/images/item2.jpg",
                        "title": "this is menu",
                        "text": "description",
                        "actions": [{
                                "type": "postback",
                                "label": "Buy",
                                "data": "action=buy&itemid=222"
                            },
                            {
                                "type": "postback",
                                "label": "Add to cart",
                                "data": "action=add&itemid=222"
                            },
                            {
                                "type": "uri",
                                "label": "View detail",
                                "uri": "http://example.com/page/222"
                            }
                        ]
                    }
                ]
            }
        })
        usersRef.push({
            message: message_lineTochat,
            user: receiverId,
            messageTime: date.toString()
        });


        /*  ===============  TEXTS  ===============  */


    } else {
        io.sockets.emit('new message', {
            msg: message_lineTochat,
            name: 'Visitor'
        });
        usersRef.push({
            message: message_lineTochat,
            user: receiverId,
            messageTime: date.toString()
        });
    }
    // 訊息是xxxxxx, template message
    // AI 機器人 設定
    var request = appApiai.textRequest(message_lineTochat, {
        sessionId: '46110120-6a78-4a0e-a5f0-a8596b53d37e'
    });
    request.on('response', function(response) {
        console.log(response);
        let res_msg = response.result.fulfillment.speech
        if (response.result.action !== 'input.unknown') {
            io.sockets.emit('new message', {
                msg: res_msg,
                name: 'BOT'
            });
            event.reply({
                type: 'text',
                text: 'BOT：' + res_msg
            });
        }
    });
    request.on('error', function(error) {
        console.log(error);
    });
    request.end();
    // AI  機器人 end

});
app.post('/webhook/', linebotParser);

// LINE login /verifyToken
app.post('/', (req, res) => {
    if (!req.body.token) {
        return res.status(400).send('Access Token not found');
    }
    const reqToken = req.body.token;

    // Send request to LINE server for access token verification
    const options = {
        url: 'https://api.line.me/v1/oauth/verify',
        headers: {
            'Authorization': `Bearer ${reqToken}`
        }
    };
    request(options, (error, response, body) => {
        if (!error && response.statusCode === 200) {
            const lineObj = JSON.parse(body);
            // Don't forget to verify the token's channelId to prevent spoof attack
            if ((typeof lineObj.mid !== 'undefined') &&
                (lineObj.channelId === myLINEChannelId)) {
                // Access Token Validation succeed with LINE server
                // Generate Firebase token and return to device
                const firebaseToken = generateFirebaseToken(lineObj.mid);

                // Update Firebase user profile with LINE profile
                updateUserProfile(reqToken, firebaseToken, lineObj.mid, () => {
                    const ret = {
                        firebase_token: firebaseToken
                    };
                    return res.status(200).send(ret);
                });
            }
        }

        const ret = {
            error_message: 'Authentication error: Cannot verify access token.'
        };
        return res.status(403).send(ret);

    });

});

function generateFirebaseToken(lineMid) {
    var firebaseUid = 'line:' + lineMid;
    var additionalClaims = {
        provider: 'LINE'
    };
    return firebase.auth().createCustomToken(firebaseUid);
}

/**
 * Socket.io
 */
//連接
io.sockets.on('connection', (socket) => {

    // 新使用者
    socket.on('new user', (data, callback) => {
        // if(nicknames.indexOf(data) != -1){
        if (data in users) {
            callback(false);
        } else {
            callback(true);
            socket.nickname = data;
            users[socket.nickname] = socket;
            // nicknames.push(socket.nickname);
            updateNicknames();
        }
    });

    function updateNicknames() {
        io.sockets.emit('usernames', Object.keys(users));
    }

    // 從SHIELD chat傳送訊息
    socket.on('send message', (data, callback) => {
        console.log(data, receiverId);
        var msg = data.trim();
        var message;

        if (msg.includes('/sticker')) {
            message = {
                type: "sticker",
                packageId: "1",
                stickerId: "10"
            };
        } else {
            message = {
                type: "text",
                text: msg
            };
        }

        let d = Date.now();
        let date = new Date(d);

        // 訊息傳到後台介面上
        if (msg.indexOf('.com') !== -1 || msg.indexOf('.edu') !== -1 || msg.indexOf('.net') !== -1 || msg.indexOf('.io') !== -1 || msg.indexOf('.org') !== -1) {
            if (message_lineTochat.indexOf('https') !== -1 || message_lineTochat.indexOf('http') !== -1) {
                io.sockets.emit('new message', {
                    msg: '<a href=' + message_lineTochat + '>' + message_lineTochat + '</a>',
                    name: socket.nickname
                });
            } else {
                io.sockets.emit('new message', {
                    msg: '<a href="https://' + message_lineTochat + '/" target="_blank">' + message_lineTochat + '</a>',
                    name: socket.nickname
                });
            }
        } else if (msg.includes('/sticker')) {
            io.sockets.emit('new message', {
                msg: 'Send sticker to user',
                name: socket.nickname
            });
        } else {
            io.sockets.emit('new message', {
                msg: msg,
                name: socket.nickname
            });
        }

        // 訊息傳到LINE
        if (receiverId !== undefined) {
            bot.push(receiverId, message);
        }

        // 訊息儲存到firebase資料庫
        agentsRef.push({
            message: msg,
            agent: socket.nickname,
            messageTime: date.toString()
        });
    });

    socket.on('disconnect', (data) => {
        if (!socket.nickname) return;
        delete users[socket.nickname];
        // nicknames.splice(nicknames.indexOf(socket.nickname), 1);
        updateNicknames();
    });
});

// catch 404 and forward to error handler
app.use(function(req, res, next) {
    var err = new Error('Not Found');
    err.status = 404;
    next(err);
});

// error handler
app.use(function(err, req, res, next) {
    // set locals, only providing error in development
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};

    // render the error page
    res.status(err.status || 500);
    res.render('error');
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}
