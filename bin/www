#!/usr/bin/env node

/**
 * Module dependencies.
 */
// express var
var app = require('../app');
var debug = require('debug')('project-shield:server');
var http = require('http');
// npm plugins var
var firebase = require('firebase');
var linebot = require('linebot');
var apiai = require('apiai');
var fs = require('fs');
var ticket = {} ;
var unirest = require('unirest');
var API_KEY = "VAxM08x35ThAOEqIgvOF";
var FD_ENDPOINT = "fongyu";
var MessengerPlatform = require('facebook-bot-messenger');

// custom global var
var chatData; // firebase chat data
var agentChatData; // firebase agent data
var tagsData; // firebase tag data
var users = {};
var agent_nickname = 'agent';
//webhook event
var receiverId = '';
var agent_sendTo_receiver;
// LINE bot設定
var bot = [];
var linebotParser = [
  function() {
    console.log("Enter channel_1 information first");
  },
  function() {
    console.log("Enter channel_2 information first");
  }
];

// configuration
var fb_bot = MessengerPlatform.create({
  pageID: '1198280690226258',
  appID: '472206313149798',
  appSecret: '64f066580f1118cce5277483865680f9',
  validationToken: '8d651e7bf52b3f923d099302268b8893',
  pageToken: 'EAAGteBmOVWYBAOpsz0pMcEzVKbIh0pBi1uc7SrFhmEYGpxxk3n5MRIpeXCsceKa2f2WQCHkhCVoemeHYwGK5fsXAYicRMOX6FsTCnaRXWTKsqqNtcm7hh8Jw5IS7ypXnhKtP9tjAg0SZCtfoJMzFR0sWzuGBpCXicItwa0IzFZArTcz5p6'
});

var config = {
  apiKey: "AIzaSyCKIPCKJpN1PCqK1EUygD6erNpo2lGmrpA",
  authDomain: "shield-production.firebaseapp.com",
  databaseURL: "https://shield-production.firebaseio.com",
  projectId: "shield-production",
  storageBucket: "shield-production.appspot.com",
  messagingSenderId: "524065152880"
};
firebase.initializeApp(config);
const newDBRef = firebase.database().ref().child('chats/Data');
const agentDBRef = firebase.database().ref().child('chats/AgentChatData');
const tagsRef = firebase.database().ref().child('tags');
newDBRef.on('value', snapshot=> {
   chatData = snapshot.val();
   console.log("chat data loaded");
});
agentDBRef.on('value', snapshot=> {
  agentChatData = snapshot.val();
  console.log("agent chat loaded");
})
tagsRef.on('value', snapshot=> {
   tagsData = snapshot.val().Data;
   console.log("tags data loaded");
});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require('socket.io').listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// 接收訊息
// LINE bot implement
function bot_on_message(event) {
    console.log(event);
    let message_type = event.message.type;
    let message_lineTochat = event.message.text;
    let receiverId = event.source.userId;
    let receiver_name;
    let nowTime = Date.now();

    console.log('current ID is: '+receiverId);

    event.source.profile().then(function(profile) {
      // console.log(profile.pictureUrl);
        receiver_name = profile.displayName;
        if( receiver_name==undefined ) receiver_name = "userName_undefined";

        var msgObj = {
          owner: "user",
          name: receiver_name,
          time: nowTime,
          receiverId: receiverId
        };

        // from wenyen
        //  ===================  KINDS ====================
        if (message_type === 'sticker') {
          let packageId = event.message.packageId;
          let stickerId = event.message.stickerId;
          msgObj.message = '<img src="https://sdl-stickershop.line.naver.jp/stickershop/v1/sticker/'+stickerId+'/android/sticker.png"' +
          'width="20%" alt="sticker cant display!"/>';
          emitIO_and_pushDB(msgObj);
        }
        else if (message_type === 'location') {
          msgObj.message = 'Location received: ';
          emitIO_and_pushDB(msgObj);
          msgObj.message = event.message.address;
          emitIO_and_pushDB(msgObj);
          event.message.content().then(function(content) {
            /*'base64'是圖片的編碼*/
            // console.log(content.toString('base64'));
            /*把編碼轉換成圖片(image/png)做成連結的方式*/
            let latitude = event.message.latitude;
            let longitude = event.message.longitude;
            msgObj.message = '<a target="_blank" href=" https://www.google.com.tw/maps/place/' + content.toString('base64')
             + '/@' + latitude + ',' + longitude + ',15z/data=!4m5!3m4!1s0x0:0x496596e7748a5757!8m2!3d'
              + latitude + '!4d' + longitude + '">LOCATION LINK</a>';
            emitIO_and_pushDB(msgObj);
          }).catch(function(error) {
            // error
          });

        }
        else if (message_type === 'image') {
          msgObj.message = 'Image received. Please wait for the link below';
          emitIO_and_pushDB(msgObj);
          event.message.content().then(function(content) {
            /*'base64'是圖片的編碼*/
            // console.log(content.toString('base64'));
            /*把編碼轉換成圖片(image/png)做成連結的方式*/
            msgObj.message = '<a href="data:image/png;base64,' + content.toString('base64') + '" ' +
            ' target="_blank" ><img src="data:image/png;base64,' + content.toString('base64') + '" ' +
            'width="20%" alt="image embedded using base64 encoding!"/></a>';
            emitIO_and_pushDB(msgObj);

          }).catch(function(error) {
            // error
            console.log(error);
          });

        }
        else if (message_type === 'audio') {
          msgObj.message = 'Audio received. Please wait for the link below.';
          emitIO_and_pushDB(msgObj);
          event.message.content().then(function(content) {
            // console.log(content.toString('base64'));
            msgObj.message = '<audio controls><source src="data:audio/mp4;base64,' + content.toString('base64') + '" ' +
              '" type="audio/mp4"></audio>';
            emitIO_and_pushDB(msgObj);

          }).catch(function(error) {
            // error
            console.log(error);
          });
        }
        else if (message_type === 'video') {
          msgObj.message = 'Video received. Please wait for the link below.';
          emitIO_and_pushDB(msgObj);

          event.message.content().then(function(content) {
            // console.log(content.toString('base64'));
            msgObj.message = '<video width="20%" controls><source src="data:video/mp4;base64,' + content.toString('base64') + '" ' +
              '" type="video/mp4"></video>';
            emitIO_and_pushDB(msgObj);

          }).catch(function(error) {
            // error
            console.log(error);
          });
        }
        else if (message_type === 'text' && (message_lineTochat.indexOf('.com') !== -1 || message_lineTochat.indexOf('.edu') !== -1 || message_lineTochat.indexOf('.net') !== -1 || message_lineTochat.indexOf('.io') !== -1 || message_lineTochat.indexOf('.org') !== -1)) {
          let urlStr = '<a href=';
          if (message_lineTochat.indexOf('https') === -1 || message_lineTochat.indexOf('http') === -1) {
            urlStr += '"https://';
          }
          msgObj.message = urlStr + message_lineTochat + '/" target="_blank">' + message_lineTochat + '</a>';
          emitIO_and_pushDB(msgObj);
        }
        else {
          msgObj.message = message_lineTochat;
          emitIO_and_pushDB(msgObj);
          apiai(msgObj);
          if (message_type === 'text' && (message_lineTochat.indexOf('.com') !== -1 || message_lineTochat.indexOf('.edu') !== -1 || message_lineTochat.indexOf('.net') !== -1 || message_lineTochat.indexOf('.io') !== -1 || message_lineTochat.indexOf('.org') !== -1)) {
            let urlStr = '<a href=';
            if (message_lineTochat.indexOf('https') === -1 || message_lineTochat.indexOf('http') === -1) {
              urlStr += '"https://';
            }
            msgObj.message = urlStr + message_lineTochat + '/ target="_blank">' + message_lineTochat + '</a>';
            emitIO_and_pushDB(msgObj);
          }
        }

        // function
        function emitIO_and_pushDB(obj) {
          console.log("sending object user: ");
          console.log(obj);
          console.log("sending to new firebase database");
          sendToNewFb(obj);
          console.log("sending to new io sockets...");
          sendToFrontSocket(obj);
          console.log("All sent!");
        }
        function sendToNewFb(obj){
          let flag = true;
          for( let prop in chatData ) {
            if(chatData[prop].Profile.userId == receiverId) {
              console.log("find user " + receiverId + " in database1");
              var count_unread = chatData[prop].Profile.unRead;
              count_unread++;
              // console.log(count_unread);
              let length = chatData[prop].Messages.length;
              let updateObj = {};
              updateObj['/'+prop+'/Messages/'+length] = obj;
              console.log(updateObj);
              newDBRef.update(updateObj);
              // console.log('update obj');
              // console.log(count_unread);
              newDBRef.child(prop).child("Profile").update({
                unRead: count_unread,
                photo: profile.pictureUrl? profile.pictureUrl :""
              });
              flag = false;
              console.log('finish update db');
              break;
            }
          }
          if( flag ) {
            console.log("new user come in");
            let newData = {
              Profile: {
                nickname: receiver_name,
                userId: receiverId,
                age: -1,
                telephone: "",
                address: "",
                firstChat: nowTime,
                首次聊天時間: nowTime,
                recentChat: nowTime,
                上次聊天時間: nowTime,
                totalChat: 1,
                總共聊天時間: 1,
                avgChat: 1,
                平均每次聊天時間: 1,
                聊天次數: 1,
                unRead: 1,
                photo: profile.pictureUrl? profile.pictureUrl :""
              },
              Messages: [obj]
            };
            newDBRef.push(newData);
            io.sockets.emit('new user profile', newData.Profile);
          }
        }
        function sendToFrontSocket(obj) {
          for( let prop in chatData ) {
            if(chatData[prop].Profile.userId == obj.receiverId) {
              var count_unread_toFront = chatData[prop].Profile.unRead;
            }
          }//for let prop in chatData
          obj.id = receiverId;
          obj.unRead = count_unread_toFront;
          obj.pictureUrl = profile.pictureUrl;
          console.log('insert unRead: ');
          console.log(obj);
          io.sockets.emit('new message2', obj);
          count_unread_toFront++;
        }

        function apiai(obj) {
          var apiai = require('apiai');
          var app = apiai('a84ed63ae3914a1fb4601f2824d4cabd');
          var request = app.textRequest(obj.message, {
              sessionId: '0896c04e-218b-4951-b75d-2d09e1ce7d4b'
              });
          request.on('response', function(response) {
            let action = response.result.action ;
            let speech = response.result.fulfillment.messages[0].speech ;
            let parameter = response.result.parameters ;
            let complete = !response.result.actionIncomplete ;
            let userSay = response.result.resolvedQuery ;

            if(action != 'input.unknown'){
              console.log(response.result) ;
              msgObj.owner = 'agent';
              msgObj.name = 'api.ai';
              msgObj.unRead = 1;
              response.result.unRead = 1;
              console.log(response.result) ;
              if(action == 'input.welcome'||action == 'timeGreeting'){
                obj.message = '已接收選項'+"購買方案, "+"服務時段, "+'問卷調查';
                emitIO_and_pushDB(msgObj);
                event.reply({
                  "type": "template",
                  "altText": "this is a buttons template",
                  "template": {
                    "type": "buttons",
                    "title": "問題選項",
                    "text": "請選擇一個詢問主題",
                    "actions": [{
                        "type": "postback",
                        "label": "購買方案",
                        "data": "purchasePlan"
                    },{
                        "type": "postback",
                        "label": "服務時段",
                        "data": "serviesHour"
                    },{
                        "type": "postback",
                        "label": "問卷調查",
                        "data":"Questionnaire_start"
                    }]
                  }
                });
              }
              else if(action == 'tinistart.faq'){
                let type = speech ;
                //let content = '';
                let incomplete = response.result.actionIncomplete ;
                console.log(type) ;
                if(incomplete){
                  msgObj.message = speech;
                  emitIO_and_pushDB(msgObj);
                  event.reply({ type: 'text', text: speech });
                }
                else if(type == 'principal'){
                  // msgObj.message = "關於負責人";
                  // emitIO_and_pushDB(msgObj);
                  event.reply({
                    "type": "template",
                    "altText": "關於負責人",
                    "template": {
                      "type": "buttons",
                      "title": "關於負責人",
                      "text": "以下是有關負責人的常見問題",
                      "actions": [{
                        "type": "postback",
                        "label": "請問什麼樣的人可以擔任負責人?",
                        "data": "1-1"                      }]
                    }
                  });

                }
                else if(type == 'money'){
                  // msgObj.message = '關於資本額';
                  // emitIO_and_pushDB(msgObj);
                  event.reply({
                    "type": "template",
                    "altText": "關於資本額",
                    "template": {
                      "type": "buttons",
                      "title": "關於資本額",
                      "text": "以下是有關資本額的常見問題",
                      "actions": [{
                        "type": "postback",
                        "label": "公司的資本額有最低限制嗎",
                        "data": "2-1",
                      },{
                        "type": "postback",
                        "label": "資本額要在銀行放多久才能用",
                        "data": "2-2",
                      },{
                        "type": "postback",
                        "label": "資本額一定要經過會計師簽證查核嗎",
                        "data": "2-3",
                      },{
                        "type": "postback",
                        "label": "我能請人代做資本額嗎",
                        "data": "2-4",
                      }]
                    }
                  });
                }
                else if(type == 'servies'){
                  // msgObj.message = '關於附加服務';
                  // emitIO_and_pushDB(msgObj);
                  event.reply({
                    "type": "template",
                    "altText": "關於附加服務",
                    "template": {
                      "type": "buttons",
                      "title": "關於附加服務",
                      "text": "以下是有關附加服務的常見問題",
                      "actions": [{
                        "type": "postback",
                        "label": "什麼是商務中心",
                        "data": "3-1",
                      },{
                        "type": "postback",
                        "label": "商務中心可以提供什麼服務",
                        "data": "3-2",
                      },{
                        "type": "postback",
                        "label": "App製作是怎麼樣的服務",
                        "data": "3-3",
                      },{
                        "type": "postback",
                        "label": "什麼樣的人適合使用商務中心",
                        "data": "3-4",
                      }]
                    }
                  });
                }
                else if(type == 'bank'){
                  // msgObj.message = '關於銀行帳戶';
                  // emitIO_and_pushDB(msgObj);
                  event.reply({
                    "type": "template",
                    "altText": "關於銀行帳戶",
                    "template": {
                      "type": "buttons",
                      "title": "關於銀行帳戶",
                      "text": "以下是有關銀行帳戶的常見問題",
                      "actions": [{
                        "type": "postback",
                        "label": "如何挑選辦理的銀行",
                        "data": "4-1",
                      },{
                        "type": "postback",
                        "label": "如何將公司籌備處帳戶變成正式帳戶",
                        "data": "4-2",
                      },{
                        "type": "postback",
                        "label": "我可以在不同銀行開設公司銀行帳戶嗎",
                        "data": "4-3",
                      }]
                    }
                  });
                }
                else if(type == 'starting'){
                  // msgObj.message = '關於公司設立';
                  event.reply({
                    "type": "template",
                    "altText": "關於公司設立",
                    "template": {
                      "type": "carousel",
                      "columns": [
                          {
                            "text": "以下是有關公司設立的常見問題",
                            "actions": [
                                {
                                    "type": "postback",
                                    "label": "印章不見時有什麼要注意的?",
                                    "data": "5-1",
                                },
                                {
                                    "type": "postback",
                                    "label": "我可以不設立公司或行號就開始營業嗎?",
                                    "data": "5-2",
                                },
                                {
                                    "type": "postback",
                                    "label": "想用的名稱已被使用，但處於解散狀態",
                                    "data": "5-3",
                                }
                            ]
                          },{
                            "text": "以下是有關公司設立的常見問題",
                            "actions": [
                                {
                                  "type": "postback",
                                  "label": "想開小吃店或小店面還需要設立公司嗎",
                                  "data": "5-4",
                                },
                                {
                                  "type": "postback",
                                  "label": "請問我需要準備些什麼東西?",
                                  "data": "5-5",
                                },
                                {
                                  "type": "postback",
                                  "label": "沒有建物所有權狀的話要怎麼辦?",
                                  "data": "5-6",
                                }
                            ]
                          },{
                            "text": "以下是有關公司設立的常見問題",
                            "actions": [
                                {
                                  "type": "postback",
                                  "label": "如果公司大小章不見的話要怎麼處理?",
                                  "data": "5-7",
                                },
                                {
                                  "type": "postback",
                                  "label": "外國人在台灣設立公司時的步驟有什麼不同?",
                                  "data": "5-8",
                                },
                                {
                                  "type": "postback",
                                  "label": "公司申請要用的文件和資料要怎樣交給你們?",
                                  "data": "5-9",
                                }
                            ]
                          },{
                            "text": "以下是有關公司設立的常見問題",
                            "actions": [
                                {
                                  "type": "postback",
                                  "label": "我該設立有限公司還是股份有限公司?",
                                  "data": "5-10",
                                },
                                {
                                  "type": "postback",
                                  "label": "營業項目要設多少個?有限制嗎?",
                                  "data": "5-11",
                                },
                                {
                                  "type": "postback",
                                  "label": " ",
                                  "data": " ",
                                }
                            ]
                          }
                      ]
                    }
                  });
                  emitIO_and_pushDB(msgObj);
                }
                else if(type == 'business'){
                  // msgObj.message = '關於營業項目';
                  // emitIO_and_pushDB(msgObj);
                  event.reply({
                    "type": "template",
                    "altText": "關於營業項目",
                    "template": {
                      "type": "buttons",
                      "title": "關於營業項目",
                      "text": "以下是有關營業項目的常見問題",
                      "actions": [{
                        "type": "postback",
                        "label": "什麼是特許營業項目",
                        "data": "6-1",
                      },{
                        "type": "postback",
                        "label": "我能自行增加製造產品的項目嗎",
                        "data": "6-2",
                      }]
                    }
                  });
                }
                else if(type == 'price'){
                  // msgObj.message = '關於價格方案';
                  // emitIO_and_pushDB(msgObj);
                  event.reply({
                    "type": "template",
                    "altText": "關於價格方案",
                    "template": {
                      "type": "buttons",
                      "title": "關於價格方案",
                      "text": "以下是有關價格方案的常見問題",
                      "actions": [{
                        "type": "postback",
                        "label": "為什麼有特許營業項目時要另外計算費用?",
                        "data": "7-1",
                      },{
                        "type": "postback",
                        "label": "兩個方案差別在哪?",
                        "data": "7-2",
                      }]
                    }
                  });
                }
                else if(type == 'insurance'){
                  // msgObj.message = '關於勞健保';
                  // emitIO_and_pushDB(msgObj);
                  event.reply({
                    "type": "template",
                    "altText": "關於勞健保",
                    "template": {
                      "type": "buttons",
                      "title": "關於勞健保",
                      "text": "以下是有關勞健保的常見問題",
                      "actions": [{
                        "type": "postback",
                        "label": "我的員工很少，能不投保勞健保嗎?",
                        "data": "10-1",
                      },{
                        "type": "postback",
                        "label": "我是負責人，我要怎麼投勞保?",
                        "data": "10-2",
                      },{
                        "type": "postback",
                        "label": "我是負責人，我要怎麼投健保?",
                        "data": "10-3",
                      },{
                        "type": "postback",
                        "label": "現在加保勞健保會被追繳勞健保嗎?",
                        "data": "10-4",
                      }]
                    }
                  });
                }
                else if(type == 'other'){
                  // msgObj.message = '常見問題';
                  // emitIO_and_pushDB(msgObj);
                  event.reply({
                    "type": "template",
                    "altText": "常見問題",
                    "template": {
                      "type": "carousel",
                      "columns": [
                        {
                          "text": "以下是其他常見問題",
                          "actions":[
                            {
                              "type": "postback",
                              "label": "請問貴公司的提供服務的區域有哪些?",
                              "data": "8-1",
                            },
                            {
                              "type": "postback",
                              "label": "請問貴公司的服務時間?",
                              "data": "8-2",
                            },
                            {
                              "type": "postback",
                              "label": "你們怎麼幫我們進行客服代理的服務?",
                              "data": "8-3",
                            }
                          ]
                        },{
                          "text": "以下是其他常見問題",
                          "actions":[
                            {
                              "type": "postback",
                              "label": "我要怎麼向你們付費並取得正式文件?",
                              "data": "8-4",
                            },
                            {
                              "type": "postback",
                              "label": "我可以不用統一發票嗎?",
                              "data": "9-1",
                            },
                            {
                              "type": "postback",
                              "label": " ",
                              "data": " ",
                            }
                          ]
                        }
                      ]
                    }
                  });
                }
                return ;
              }
              else if(action == 'ticket' ){
                ticket.email = parameter.email ;
                ticket.phone = parameter.phone ;
                ticket.goods = parameter.goods ;
                ticket.name = receiver_name ;
                ticket.lineId = receiverId;
              }
              else if(action == 'ticket.description'){
                ticket.description = userSay ;
                ticket.priority = parameter.priority ;
                if(complete) createTicket(ticket);
              }
              obj.message = speech;
              emitIO_and_pushDB(obj) ;
              event.reply({ type: 'text', text: msgObj.message });
            }
            else{console.log(action);}

          });
          request.on('error', function(error) {
              console.log(error);
          });
          request.end();

        }

        function createTicket(obj) {

          var PATH = "/api/v2/tickets";
          var URL =  "https://" + FD_ENDPOINT + ".freshdesk.com"+ PATH;
          console.log('ticket:');
          console.log(obj);

          let priority ;
          if(obj.priority.indexOf('high') != -1) priority = 3 ;
          else if(obj.priority.indexOf('medium') != -1)priority = 2 ;
          else priority = 1;

          var fields = {
            'description': obj.description,
            'email': obj.email,
            'name': obj.name,
            'phone': obj.phone,
            'priority': priority,
            'status': 2,
            'subject': '收到_'+obj.goods+'_訂單'
            // 'tags': [obj.lineId.substring(1)]
          }
          //console.log('fields:');
          //console.log(fields);

          for( let prop in chatData ) {
            if(chatData[prop].Profile.userId == obj.lineId) {
              console.log("Ticket find user " + obj.lineId + " in database");
              let updateObj = {};
              if(chatData[prop].Profile.email == undefined || chatData[prop].Profile.email == '' || chatData[prop].Profile.email == null){
                updateObj['/'+prop+'/Profile/email/'+0] = obj.email;
              }
              else{
                let length = chatData[prop].Profile.email.length ;
                updateObj['/'+prop+'/Profile/email/'+length] = obj.email;
              }
              newDBRef.update(updateObj) ;
              newDBRef.child(prop).child("Profile").update({phone: obj.phone});
              console.log('firebase update ticket info complete') ;
              break;
            }
          }

          var Request = unirest.post(URL);
          console.log('fields:');
          console.log(fields);
          Request.auth({
            user: API_KEY,
            pass: "X",
            sendImmediately: true
          })
          .type('json')
          .send(fields)
          .end(function(response){
            console.log(response.body)
            console.log("Response Status : " + response.status)
            if(response.status == 201){
              console.log("Location Header : "+ response.headers['location'])
            }
            else{
              	console.log("X-Request-Id :" + response.headers['x-request-id']);
            }
            });
        }



  });
}

function bot_on_postback(event){
  let data = event.postback.data ;
  let receiverId = event.source.userId;
  let receiver_name;
  let nowTime = Date.now();
  console.log(event);

  event.source.profile().then(function(profile){
    receiver_name = profile.displayName;
    if( receiver_name==undefined ) receiver_name = "userName_undefined";

    var msgObj = {
      owner: "agent",
      name: 'api.ai',
      time: nowTime
    };

    function emitIO_and_pushDB(obj) {
      console.log("sending object user: ");
      console.log(obj);
      console.log("sending to new firebase database");
      sendToNewFb(obj);
      console.log("sending to new io sockets...");
      sendToFrontSocket(obj);
      console.log("All sent!");
    }
    function sendToFrontSocket(obj) {
      obj.id = receiverId;
      io.sockets.emit('new message2', obj);
    }
    function sendToNewFb(obj){
      let flag = true;
      for( let prop in chatData ) {
        if(chatData[prop].Profile.userId == receiverId) {
          console.log("find user " + receiverId + " in database");
          let length = chatData[prop].Messages.length;
          let updateObj = {};
          updateObj['/'+prop+'/Messages/'+length] = obj;
          newDBRef.update(updateObj);
          newDBRef.child(prop).child("Profile").update({
            unRead: true,
            photo: profile.pictureUrl
          });
          flag = false;
          break;
        }
      }
      if( flag ) {
        console.log("new user come in");
        let newData = {
          Profile: {
            nickname: receiver_name,
            userId: receiverId,
            age: -1,
            telephone: "",
            address: "",
            firstChat: nowTime,
            首次聊天時間: nowTime,
            recentChat: nowTime,
            上次聊天時間: nowTime,
            totalChat: 1,
            總共聊天時間: 1,
            avgChat: 1,
            平均每次聊天時間: 1,
            聊天次數: 1,
            unRead: true,
            photo: profile.pictureUrl
          },
          Messages: [obj]
        };
        newDBRef.push(newData);
      }
    }
    function sendToLocalDB(obj) {
      let DATA = JSON.parse(fs.readFileSync('chatMsg.json'));
      let i=0;
      for( i=0; i<DATA.length; i++ ) {
        if( DATA[i].Profile.userId == receiverId ) {
          DATA[i].Messages.push(obj);
          break;
        }
      }
      if( i==DATA.length ) {
        console.log("new user come in");
        let newData = {
          Profile: {
            nickname: receiver_name,
            userId: receiverId,
            age: -1,
            telephone: "",
            address: "",
            firstChat: nowTime,
            recentChat: nowTime,
            totalChat: 1,
            avgChat: 1
          },
          Messages: [obj]
        };
        DATA.push(newData);
      }
      fs.writeFileSync('chatMsg.json', JSON.stringify(DATA, null, 2));
      console.log("send to local DB success");
    }

    if(data.indexOf('purchasePlan') != -1){
      let hr = data.substring(13);
      console.log("hour:"+hr) ;
      switch (hr) {
        case '4':
          msgObj.message = "4小時方案   15,888 元  \n 4小時方案/每天   $15,888每月" ;
          break;
        case '8':
          msgObj.message = "8小時方案   21,888 元  \n 8小時方案/每天   $21,888每月" ;
          break;
        case '16':
          msgObj.message = "16小時方案   39,888 元  \n 16小時方案/每天   $39,888每月" ;
          break;
        default:
          msgObj.message = '已發送購買方案'+"4小時方案  "+"8小時方案  "+"16小時方案  ";
          event.reply({
            "type": "template",
            "altText": "購買方案說明",    //text that customer see at chat list
            "template": {
              "type": "buttons",
              "title": "購買方案說明",
              "text": "請選擇一個方案",
              "actions": [{
                "type": "postback",
                "label": "4小時方案",
                "data": "purchasePlan-4"
              },{
                "type": "postback",
                "label": "8小時方案",
                "data": "purchasePlan-8"
              },{
                "type": "postback",
                "label": "16小時方案",
                "data": "purchasePlan-16"
              }]
            }
          });
          break;

      }
      emitIO_and_pushDB(msgObj);
      event.reply({"type":"text","text":msgObj.message}) ;
    }
    else if(data == 'serviesHour'){
      msgObj.message =
      "我們的服務時如下:\n"+
      "「0700~1100」\n "+
      "「1100~1500」\n "+
      "「1500~1900」\n "+
      "「1900~2300」\n "+
      " 兩個時段必須是「連續的」\n"+
      "「0700~1100」及「1100~1500」\n"+
      "「1100~1500」及「1500~1900」\n"+
      "「1500~1900」及「1900~2300」。" ;

      console.log(msgObj.message) ;
      emitIO_and_pushDB(msgObj);
      event.reply({"type":"text","text":msgObj.message}) ;
    }
    else if(data.indexOf('Questionnaire') != -1){
      let pos = data.indexOf(':');
      let para = data.substring(14,pos);
      let value = data.substring(pos+1);
      let id = event.source.userId ;
      //console.log(pos+" "+id+":"+para+":"+value) ;
      //console.log(event.message) ;
      if(pos != -1){
        let obj = {} ;
        obj.id = id ;
        obj.para = para ;
        obj.value = value ;
        updateProfile(obj) ;
      }

      if(para == '性別'){
        msgObj.message = '詢問客戶資料(居住地)';
        emitIO_and_pushDB(msgObj);
        event.reply({
          "type": "template",
          "altText": "問券調查",
          "template": {
            "type": "buttons",
            "title": "問券調查:地區",
            "text": "請選擇您的性別",
            "actions": [{
              "type": "postback",
              "label": "地區:北部",
              "text": "地區:北部",
              "data": "Questionnaire_地區:北部"
            },{
              "type": "postback",
              "label": "地區:中部",
              "text": "地區:中部",
              "data": "Questionnaire_地區:中部"
            },{
              "type": "postback",
              "label": "地區:南部",
              "text": "地區:南部",
              "data": "Questionnaire_地區:南部"
            },{
              "type": "postback",
              "label": "地區:東部",
              "text": "地區:東部",
              "data": "Questionnaire_地區:東部"
            }]
          }
        });

      }
      else if(para == '地區'){
        msgObj.message = '詢問客戶資料(年齡層)';
        emitIO_and_pushDB(msgObj);
        event.reply({
          "type": "template",
          "altText": "問券調查part2",
          "template": {
            "type": "carousel",
            "columns": [
                {
                  "text": "您的年齡層。請左右滑動並選擇您的年齡層",
                  "actions": [
                      {
                          "type": "postback",
                          "label": "年齡:20以下",
                          "text": "年齡:20以下",
                          "data": "Questionnaire_年齡:20以下"
                      },
                      {
                          "type": "postback",
                          "label": "年齡:21-30",
                          "text": "年齡:21-30",
                          "data": "Questionnaire_年齡:21-30"
                      },
                      {
                          "type": "postback",
                          "label": "年齡:31-40",
                          "text": "年齡:31-40",
                          "data": "Questionnaire_年齡:31-40"
                      }
                  ]
                },
                {
                  "text": "您的年齡層。請左右滑動並選擇您的年齡層",
                  "actions": [
                      {
                        "type": "postback",
                        "label": "年齡:41-50",
                        "text": "年齡:41-50",
                        "data": "Questionnaire_年齡:41-50"
                      },
                      {
                        "type": "postback",
                        "label": "年齡:51-64",
                        "text": "年齡:51-64",
                        "data": "Questionnaire_年齡:51-64"
                      },
                      {
                        "type": "postback",
                        "label": "年齡:65以上",
                        "text": "年齡:65以上",
                        "data": "Questionnaire_年齡:65以上"
                      }
                  ]
                }
            ]
          }
        });
      }
      else if(para == '年齡'){
        msgObj.message = '感謝您填寫問卷!' ;
        emitIO_and_pushDB(msgObj);
        //bot.push(obj.id,msgObj.message);
        event.reply({ type: 'text', text: msgObj.message });
      }
      else{
        event.reply({
          "type": "template",
          "altText": "問券調查part1",
          "template": {
            "type": "buttons",
            "title": "問券調查:性別",
            "text": "請選擇您的性別",
            "actions": [{
              "type": "postback",
              "label": "性別:男",
              "text": "性別:男",
              "data": "Questionnaire_性別:男"
            },{
              "type": "postback",
              "label": "性別:女",
              "text": "性別:女",
              "data": "Questionnaire_性別:女"
            }]
          }
        });
        msgObj.message = '詢問客戶資料(性別)';
        emitIO_and_pushDB(msgObj);
      }


    }
    else{
      tinistartAns(event);
    }

    function tinistartAns(event) {
      var gsjson = require('google-spreadsheet-to-json');

      gsjson({
          spreadsheetId: '1ZhR-f6BVHp4kIzBQL_VK9BDP4AS0KDTESYqq22RrtOA',
          hash : 'id'
          // other options...
      })
      .then(function(result) {
        let ansId = event.postback.data;
        console.log(ansId);
        //console.log(result.length);
        //console.log(result);
        let ans = result[ansId].ans ;
        let que = result[ansId].question ;
        var msg = 'Q :\n'+que+'\n'+'A :\n'+ans ;
        msgObj.owner = "agent";
        msgObj.name ='apiai';
        msgObj.time = nowTime;
        msgObj.id = receiverId;
        msgObj.message = msg ;
        emitIO_and_pushDB(msgObj) ;
        event.reply({ type: 'text', text: msg });
      })
      .catch(function(err) {
          console.log(err.message);
          console.log(err.stack);
      });

    }
    function updateProfile(survey) {
      /*
      survey:{id ,para ,value }
      //*//*
      let survey = {id:'',para:'',value:''};
      let pos = event.message.text.indexOf(':');
      let para = event.message.text.substring(0,pos);
      let value = event.message.text.substring(pos+1);
      survey.id = event.source.userId;
      survey.para = para;
      survey.value = value ;
      //*/
      console.log(survey);
      for( let i in chatData ) {
        if( chatData[i].Profile.userId == survey.id ) {
          console.log('match!updating profile...')
          let obj = {};
          obj['/'+survey.para] = survey.value;
          newDBRef.child(i).child("Profile").update(obj);
          break;
        }
      }
    }

  });
}

// 群組webhook
app.post('/webhook1/', function() {
  console.log("webhook arguments length = "+arguments.length);
  linebotParser[0](arguments[0], arguments[1], arguments[2]);
});
app.post('/webhook2/', function() {
  console.log("webhook arguments length = "+arguments.length);
  linebotParser[1](arguments[0], arguments[1], arguments[2]);
});

/**
 * Socket.io 傳訊息
 */

io.sockets.on('connection', (socket) => {

    // 更新群組
    socket.on('update bot', (data) => {
      if( bot[0] ) bot[0]._events = {};
      if( bot[1] ) bot[1]._events = {};
      for( let i=0; i<data.length; i++ ) {
        console.log("update Line channel_"+i+" information.");
        // console.log(data[i]);
        bot[i] = linebot(data[i]);
        console.log(bot[i]);
        linebotParser[i] = bot[i].parser();
        console.log(linebotParser[i]);
        bot[i].on('message', bot_on_message);
        bot[i].on('postback', bot_on_postback);
        console.log('update done');
      }
    });

    // 打開群組
    socket.on('chat to server', data => {
      console.log(data[0]);
      console.log(data[1]);
      for( let i=0; i<data.length; i++ ) {
        console.log("update Line channel_"+i+" information.");
        console.log(data[i]);
        bot[i] = linebot(data[i]);
        console.log(bot[i]);
        linebotParser[i] = bot[i].parser();
        console.log(linebotParser[i]);
        bot[i].on('message', bot_on_message);
        bot[i].on('postback', bot_on_postback);
        console.log('update done');
      }
    });

    // 新使用者
    socket.on('new user', (data, callback) => {
        console.log(data);
        if (data in users) {
          callback(false);
        }
        else {
          callback(true);
          socket.nickname = data;
          users[socket.nickname] = socket;
        }
    });

    socket.on('get tags from chat', data => {
      console.log("tags socket");
      socket.emit('push tags to chat', tagsData);
    });

    socket.on('get tags from tags', data => {
      socket.emit('push tags to tags', tagsData);
    });

    socket.on('update tags', data => {
      console.log(data);
      let updateObj = {};
      updateObj['/Data'] = data;
      tagsRef.update(updateObj);
    });

    socket.on('get json from back', (data, callback) => {
      console.log("chat data socket");
      let sendData = [];
      for( let i in chatData ) {
        let profile = chatData[i].Profile;
        let _lastMsg = chatData[i].Messages[ chatData[i].Messages.length-1 ];
        if( profile.recentChat != _lastMsg.time ) {
          console.log( "ID = "+profile.userId+" update time!");
          profile.recentChat = _lastMsg.time;

          let timeArr = chatData[i].Messages.map( function(ele) {
            return ele.time;
          });
          let times = [];
          let j=0;
          const GAP = 1000*60*15; //15 min
          let headTime;
          let tailTime;
          while( j<timeArr.length ) {
            headTime = tailTime = timeArr[j];
            while( timeArr[j]-tailTime < GAP ) {
              tailTime = timeArr[j];
              j++;
              if( j==timeArr.length ) break;
            }
            let num = tailTime-headTime;
            if( num<1000 ) num = 1000;
            times.push(num);
          }
          let sum = 0;
          for( let j in times ) sum += times[j];
          sum /= 60000;
          profile.totalChat = sum;
          profile.avgChat = sum/times.length;
          profile.chatTimeCount = times.length;
          if( isNaN(profile.avgChat) || profile.avgChat<1 ) profile.avgChat = 1;
          if( isNaN(profile.totalChat) || profile.totalChat<1 ) profile.totalChat  = 1;

          let updateObj = {};
          newDBRef.child(i).child("Profile").update({
            "avgChat": profile.avgChat,
            "totalChat": profile.totalChat,
            "chatTimeCount": profile.chatTimeCount,
            "recentChat": profile.recentChat,
            "平均每次聊天時間": profile.avgChat,
            "總共聊天時間": profile.totalChat,
            "聊天次數": profile.chatTimeCount,
            "上次聊天時間": profile.recentChat
          });
        }
        let msgs = chatData[i].Messages;
        let position = 0;
        if( msgs.length>20 ) {
          position = msgs.length-20;
          msgs = msgs.slice(position);
        }
        sendData.push({
          Messages: msgs,
          position: position,
          Profile: profile
        });
      }
      // console.log(sendData);
      socket.emit('push json to front', sendData);
    });

    socket.on('upload history msg from front', data => {
      console.log('upload history msg of userId = '+data.userId+', head = '+data.head+', tail = '+data.tail);
      let userId = data.userId;
      let head = data.head;
      let tail = data.tail;
      let sendData = [];

      for( let i in chatData ) {
        if( chatData[i].Profile.userId==userId ) {
          for( let j=head; j<tail+1; j++ ) {
            // console.log(chatData[i].Messages[j]);
            sendData.push( chatData[i].Messages[j] );
          }
          break;
        }
      }
      console.log("sendData = ");
      console.log(sendData);
      socket.emit('upload history msg from back', {
        userId: userId,
        messages: sendData
      });
    });

    socket.on('read message', (data) => {
      console.log("agent read message of user "+data.id);
      for( let i in chatData ) {
        if( chatData[i].Profile.userId == data.id ) {
          newDBRef.child(i).child("Profile").update({
            "unRead": 0,
          });
          break;
        }
      }
    });

    // 從SHIELD chat傳送訊息
    socket.on('send message2', (data, callback) => {
        // console.log(data);
        let msg = data.msg.trim();
        agent_sendTo_receiver = data.id.trim();
        let msg_time = data.msgtime;
        console.log(agent_sendTo_receiver);
        if(socket.nickname !== undefined){
          agent_nickname = socket.nickname;
        } else {
          agent_nickname = 'agent';
        }

        var message;
        let nowTime = Date.now();

        if(msg.includes('/image')){
          let link = msg.substr(7);
          // console.log(link);
          message = {
            type: "image",
            originalContentUrl: link,
            previewImageUrl: link
          };
        }
        else if(msg.includes('/audio')){
          let link = msg.substr(7);
          // console.log(link);
          message = {
            type: "audio",
            originalContentUrl: link,
            duration: 6000
          };
        }
        else if(msg.includes('/video')){
          let link = msg.substr(7);
          // console.log(link);
          message = {
            type: "video",
            originalContentUrl: link,
            previewImageUrl: "https://www.movienewsguide.com/wp-content/uploads/2016/03/Phoenix-Suns.jpg"
          };
        }
        else if (msg.includes('/sticker')) {
            message = {
                type: "sticker",
                packageId: parseInt(msg.substr(msg.indexOf(' '))),
                stickerId: parseInt(msg.substr(msg.lastIndexOf(' ')))
            };
        }
        else {
            message = {
                type: "text",
                text: msg
            };
        }

        // 訊息傳到LINE
        if (agent_sendTo_receiver !== undefined ) { // 需要新增一個判斷式來分別出要傳訊息給哪一間聊天室
          bot[0].push(agent_sendTo_receiver, message);
          bot[1].push(agent_sendTo_receiver, message);
        }
        else {
          console.log("agent_sendTo_receiver undefined!");
        }

        for( let i in chatData ) {
          if( chatData[i].Profile.userId == data.id ) {
            var unRead_fromProfile = chatData[i].Profile.unRead;
            break;
          }
        }

        var msgObj = {
          owner: "agent",
          name: agent_nickname,
          time: nowTime,
          unRead: unRead_fromProfile
        };

        function emitIO_and_pushDB(obj) {
          console.log("sending object agent2: ");
          console.log(obj);
          console.log("sending to new firebase database");
          sendToNewFb(obj);
          console.log("sending to new io sockets...");
          sendToFrontSocket(obj);
          console.log("All sent!");
        }

        function sendToNewFb(obj){
          let flag = true;
          for( let prop in chatData ) {
            console.log("find next user data");
            if(chatData[prop].Profile.userId == agent_sendTo_receiver) {
              console.log("find the same user");
              let length = chatData[prop].Messages.length - 1;
              let updateObj = {};
              updateObj['/'+prop+'/Messages/'+length] = obj;
              newDBRef.update(updateObj);
              flag = false;
              break;
            }
          }
          if( flag ) {
            console.log("new user come in, impossible!!!");
            let newData = {
              Profile: {
                nickname: "undefined name at www.line.669",
                userId: agent_sendTo_receiver,
                age: -1,
                telephone: "",
                address: "",
                firstChat: nowTime,
                recentChat: nowTime,
                totalChat: 1,
                avgChat: 1
              },
              Messages: [obj]
            };
            newDBRef.push(newData);
          }
        }

        function sendToFrontSocket(obj) {
          obj.id = agent_sendTo_receiver;
          io.sockets.emit('new message2', obj);
        }

        if (msg.includes('/image')) {
          msgObj.message = 'Send image to user';
          emitIO_and_pushDB(msgObj);

        } else if (msg.includes('/audio')) {
          msgObj.message = 'Send audio to user';
          emitIO_and_pushDB(msgObj);

        } else if (msg.includes('/video')) {
          msgObj.message = 'Send video to user';
          emitIO_and_pushDB(msgObj);

        } else if (msg.indexOf('.com') !== -1 || msg.indexOf('.edu') !== -1 || msg.indexOf('.net') !== -1 || msg.indexOf('.io') !== -1 || msg.indexOf('.org') !== -1) {
            let urlStr = '<a href=';
            if (msg.indexOf('https') !== -1 || msg.indexOf('http') !== -1) {
              urlStr += '"https://';
            }
            msgObj.message = urlStr + msg + '/" target="_blank">' + msg + '</a>';
            emitIO_and_pushDB(msgObj);

        } else if (msg.includes('/sticker')) {
          msgObj.message = 'Send sticker to user';
          emitIO_and_pushDB(msgObj);

        } else {
          msgObj.message = msg;
          emitIO_and_pushDB(msgObj);
        }
    });//sent message

    socket.on('get profile', (id, callback) => {
      console.log("get profile");
      console.log(id);
        for( let i in chatData ) {
          if( chatData[i].Profile.userId == id ) {
            console.log("match!");
            socket.emit('show profile',chatData[i].Profile);
          }
        }
    });

    socket.on('update profile', (data, callback) => {
      console.log("update profile");
      for( let i in chatData ) {
        if( chatData[i].Profile.userId == data.userId ) {
          let updateObj = {};
          for( let prop in data ) {
            updateObj[prop] = data[prop];
          }
          console.log(updateObj);
          newDBRef.child(i).child("Profile").update(updateObj);
          break;
        }
      }
    });

    socket.on('get json from agentChat', (data) => {
      let thisAgentData = [];
      for( let i in agentChatData ){
        if( agentChatData[i].Profile.agent.indexOf(data.id) != -1 ) thisAgentData.push( agentChatData[i] );
      }

      let sendData = [];
      for( let i in thisAgentData ) {
        let msgs = thisAgentData[i].Messages;
        if( !msgs ) msgs = [];
        let position = 0;
        if( msgs.length>20 ) {
          position = msgs.length-20;
          msgs = msgs.slice(position);
        }
        sendData.push({
          Messages: msgs,
          position: position,
          Profile: thisAgentData[i].Profile
        });
      }
      socket.emit('push json to agentChat', sendData);
    });

    socket.on('upload history msg from front agentChat', data => {
      console.log('upload history msg of roomId = '+data.roomId+', head = '+data.head+', tail = '+data.tail);
      let roomId = data.roomId;
      let head = data.head;
      let tail = data.tail;
      let sendData = [];

      for( let i in agentChatData ) {
        if( agentChatData[i].Profile.roomId==roomId ) {
          for( let j=head; j<tail+1; j++ ) {
            console.log("j = "+j);
            sendData.push( agentChatData[i].Messages[j] );
          }
          break;
        }
      }
      console.log("sendData = ");
      console.log(sendData);
      socket.emit('upload history msg from back agentChat', {
        roomId: roomId,
        messages: sendData
      });

    });

    socket.on('read message agentChat', data => {
      for( let prop in agentChatData ) {
        if( agentChatData[prop].Profile.roomId == data.roomId ) {
          let unRead = agentChatData[prop].Profile.unRead;
          if( unRead ) {
            let pos = unRead.indexOf(data.reader);
            if( pos!=-1 ) unRead.splice(pos,1);
          }
          else unRead = [];
          agentDBRef.child(prop).child("Profile/unRead").set(unRead);
        }
      };
    });

    socket.on('send message agentChat', (data, callback) => {
        // console.log(data);
        let msg = data.msg.trim();
        let receive_room = data.roomId.trim();
        let nowTime = Date.now();

        console.log(receive_room);
        if(socket.nickname !== undefined){
          agent_nickname = socket.nickname;
        } else {
          agent_nickname = 'agent';
        }

        var msgObj = {
          name: data.sender,
          time: nowTime,
        };
        function emitIO_and_pushDB(obj) {
          console.log("sending object agent2: ");
          console.log(obj);

          console.log("sending to new firebase database");
          sendToNewFb(obj);
          console.log("sending to new io sockets...");
          sendToFrontSocket(obj);
          console.log("All sent!");
        }

        function sendToNewFb(obj){
          for( let prop in agentChatData ) {
            console.log("find next room data");
            if(agentChatData[prop].Profile.roomId == receive_room) {
              console.log("find the same room");
              let length = agentChatData[prop].Messages.length - 1;
              let updateObj = {};
              updateObj['/'+prop+'/Messages/'+length] = obj;

              let unRead = agentChatData[prop].Profile.agent;
              unRead.splice( unRead.indexOf( data.sender ), 1 );
              updateObj['/'+prop+'/Profile/unRead'] = unRead;

              agentDBRef.update(updateObj);
              flag = false;
              break;
            }
          }
        }

        function sendToFrontSocket(obj) {
          obj.roomId = receive_room;
          io.sockets.emit('new message agentChat', obj);
        }

        if (msg.indexOf('.com') !== -1 || msg.indexOf('.edu') !== -1 || msg.indexOf('.net') !== -1 || msg.indexOf('.io') !== -1 || msg.indexOf('.org') !== -1) {
            let urlStr = '<a href=';
            if (msg.indexOf('https') !== -1 || msg.indexOf('http') !== -1) {
              urlStr += '"https://';
            }
            msgObj.message = urlStr + msg + '/" target="_blank">' + msg + '</a>';
            emitIO_and_pushDB(msgObj);

        } else if (msg.includes('/sticker')) {
          stickerId = msg.substr( msg.indexOf(' ')+1 );
          msgObj.message = '<img src="https://sdl-stickershop.line.naver.jp/stickershop/v1/sticker/'+stickerId+'/android/sticker.png"' +
          emitIO_and_pushDB(msgObj);

        } else {
          msgObj.message = msg;
          emitIO_and_pushDB(msgObj);
        }
    });//sent message

    socket.on('update profile agentChat', (data, callback) => {
      console.log("update profile");
      for( let i in agentChatData ) {
        if( agentChatData[i].Profile.roomId == data.roomId ) {
          agentDBRef.child(i).child("Profile").update(data);
          return;
        }
      }
      console.log("new room come in!");

      let nowTime = Date.now();
      data.firstChat = nowTime;
      data.recentChat = nowTime;
      data.unRead = JSON.parse(JSON.stringify(data.agent));
      data.unRead.splice(data.unRead.indexOf(data.owner),1);
      console.log("data: ");
      console.log(data);

      agentDBRef.push({
        Messages: [{
          message: "group establish",
          name: "System",
          time: nowTime
        }],
        Profile: data
      });
    });

    socket.on('get ticket', (data ,callback) => {
      console.log(data) ;
      getUserTicket(data);
    });

    function getUserTicket(data) {
      var email = data.email ;
      var id = data.id ;
      var URL_ticket =  "https://" + FD_ENDPOINT + ".freshdesk.com/api/v2/tickets?email="+email;
      var viewRequest_ticket = unirest.get(URL_ticket);

      viewRequest_ticket.auth({
        user: API_KEY,
        pass: "X",
        sendImmediately: true
      })
      .end(function(response){
        console.log("Ticket Response Status : " + response.status)
        if(response.status != 200){
          console.log("X-Request-Id :" + response.headers['x-request-id']);
          return ;
        }
        socket.emit('push user ticket',{
          id: id,
          ticket: response.body
        });
      });
    }

    socket.on('disconnect', (data) => {
        if (!socket.nickname) return;
        delete users[socket.nickname];
    });
});

// catch 404 and forward to error handler
app.use(function(req, res, next) {
    var err = new Error('Not Found');
    err.status = 404;
    next(err);
});

// error handler
app.use(function(err, req, res, next) {
    // set locals, only providing error in development
    res.locals.message = err.message;
    res.locals.error = req.app.get('env') === 'development' ? err : {};

    // render the error page
    res.status(err.status || 500);
    res.render('error');
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}
